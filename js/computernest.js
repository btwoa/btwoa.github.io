const loading=document.querySelector("#loader"),canvas=document.querySelector(".webgl"),scene=new THREE.Scene,textureLoader=new THREE.TextureLoader,sizes={width:window.innerWidth,height:window.innerHeight};window.innerWidth<window.innerHeight?window.innerWidth<window.innerHeight/2?sizes.height=window.innerHeight/3:(sizes.width=window.innerWidth/1.5,sizes.height=window.innerHeight/1.5):window.innerWidth<window.innerHeight/.5?(sizes.width=window.innerWidth/2,sizes.height=window.innerHeight/2):sizes.width=window.innerWidth/4;const camera=new THREE.PerspectiveCamera(window.innerWidth<1e3?20:15,sizes.width/sizes.height,.1,100);camera.position.set(8,5,15),scene.add(camera);const controls=new THREE.OrbitControls(camera,canvas);controls.enableDamping=!0,controls.enableZoom=!0,controls.enablePan=!0,controls.minDistance=21,controls.maxDistance=50,controls.minPolarAngle=Math.PI/5,controls.maxPolarAngle=Math.PI/2;const renderer=new THREE.WebGLRenderer({canvas:canvas,antialias:!0,alpha:!0});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),renderer.outputEncoding=THREE.sRGBEncoding;const bakedTexture=textureLoader.load("https://assets.btwoa.com/baked.jpg");bakedTexture.flipY=!1,bakedTexture.encoding=THREE.sRGBEncoding;const bakedMaterial=new THREE.MeshBasicMaterial({map:bakedTexture}),loader=new THREE.GLTFLoader;loader.load("https://assets.btwoa.com/model.glb",(e=>{const i=e.scene;i.traverse((e=>e.material=bakedMaterial)),scene.add(i),scene.position.set(0,.2,0),loading.style.display="none"}),(e=>{console.log(e.loaded/e.total*100+"% loaded")})),window.addEventListener("resize",(()=>{window.innerWidth<window.innerHeight?window.innerWidth<window.innerHeight/2?sizes.height=window.innerHeight/3:(sizes.width=window.innerWidth/1.5,sizes.height=window.innerHeight/1.5):window.innerWidth<window.innerHeight/.5?(sizes.width=window.innerWidth/2,sizes.height=window.innerHeight/2):sizes.width=window.innerWidth/4,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const minPan=new THREE.Vector3(-2,-.5,-2),maxPan=new THREE.Vector3(2,.5,2),tick=()=>{controls.update(),controls.target.clamp(minPan,maxPan),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();